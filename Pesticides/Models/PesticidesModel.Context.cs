//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Pesticides.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PesticidesDBEntities : DbContext
    {
        public PesticidesDBEntities()
            : base("name=PesticidesDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ActiveIngredient> ActiveIngredients { get; set; }
        public virtual DbSet<Crop> Crops { get; set; }
        public virtual DbSet<Formulation> Formulations { get; set; }
        public virtual DbSet<Pest> Pests { get; set; }
        public virtual DbSet<PesticidesInfo> PesticidesInfoes { get; set; }
        public virtual DbSet<PesticideType> PesticideTypes { get; set; }
        public virtual DbSet<ToxicityClassWHO> ToxicityClassWHOes { get; set; }
        public virtual DbSet<ToxicityOnBee> ToxicityOnBees { get; set; }
        public virtual DbSet<ToxicityOnBird> ToxicityOnBirds { get; set; }
        public virtual DbSet<ToxicityOnFish> ToxicityOnFish { get; set; }
    
        public virtual ObjectResult<SearchPesticides_Result> SearchPesticides(Nullable<int> pesticideType, Nullable<int> activeIngredient, Nullable<int> crop, Nullable<int> pest)
        {
            var pesticideTypeParameter = pesticideType.HasValue ?
                new ObjectParameter("PesticideType", pesticideType) :
                new ObjectParameter("PesticideType", typeof(int));
    
            var activeIngredientParameter = activeIngredient.HasValue ?
                new ObjectParameter("ActiveIngredient", activeIngredient) :
                new ObjectParameter("ActiveIngredient", typeof(int));
    
            var cropParameter = crop.HasValue ?
                new ObjectParameter("Crop", crop) :
                new ObjectParameter("Crop", typeof(int));
    
            var pestParameter = pest.HasValue ?
                new ObjectParameter("Pest", pest) :
                new ObjectParameter("Pest", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchPesticides_Result>("SearchPesticides", pesticideTypeParameter, activeIngredientParameter, cropParameter, pestParameter);
        }
    }
}
